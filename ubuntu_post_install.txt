# Ubuntu post-install

# Add GitHub CLI to repo
curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
&& sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
&& echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \

# Update system
sudo apt update && sudo apt upgrade -y && sudo apt autoclean && sudo apt autoremove -y

# Install basic packages
sudo apt install git gh zsh curl xclip -y

# Install oh-my-zsh
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

# Install Powerlevel 10k
git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
sed -i 's/^ZSH_THEME=".*"$/ZSH_THEME="powerlevel10k\/powerlevel10k"/' ~/.zshrc
source ~/.zshrc

# Install zsh plugins
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
sed -i 's/^plugins=\(.*\)$/plugins=(git z zsh-syntax-highlighting zsh-autosuggestions)/' ~/.zshrc
source ~/.zshrc

# Install pyenv
PYENV_VERSIONS= 3.10.13 3.11.6 3.12.0
# Install dependencies
sudo apt install build-essential libssl-dev zlib1g-dev \
libbz2-dev libreadline-dev libsqlite3-dev curl \
libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev

curl https://pyenv.run | bash

echo '# >>>> Pyenv init >>>>' >> ~/.zshrc
echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.zshrc
echo 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.zshrc
echo 'eval "$(pyenv init -)"' >> ~/.zshrc
echo '# <<<< Pyenv end<<<<' >> ~/.zshrc
source ~/.zshrc
pyenv update

# Install pyenv versions

# Definindo a variável PYENV_VERSIONS como um array
# Ajuste a variável para as versões desejadas
PYENV_VERSIONS=("3.10.13" "3.11.6" "3.12.0")

# Loop para instalar cada versão especificada em PYENV_VERSIONS
for version in "${PYENV_VERSIONS[@]}"; do
    pyenv install $version
done
pyenv global $(printf '%s\n' "${PYENV_VERSIONS[@]}" | tac)

# Install NVM
echo '# >>>> NVM init >>>>' >> ~/.zshrc
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
echo '# <<<< NVM end<<<<' >> ~/.zshrc
source ~/.zshrc
nvm install --lts

# Install docker
sudo apt remove docker docker-engine docker.io containerd runc
sudo apt install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release -y

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo \
  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt update
sudo apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo usermod -aG docker $USER

# Instalação do batcat
# Verifique a versão mais recente em Releases · sharkdp/bat (github.com)
BCVERSION=0.24.0
cd /tmp
curl -L -o bat.deb https://github.com/sharkdp/bat/releases/download/v$BCVERSION/bat-musl_"$BCVERSION"_amd64.deb 
chmod +x bat.deb
sudo dpkg -i bat.deb
echo '#' >> ~/.zshrc
echo '# batcat alias over cat' >> ~/.zshrc
echo 'alias cat="bat --color=auto"' >> ~/.zshrc
source ~/.zshrc
rm -f bat.deb
source ~/.zshrc
cd -


# New SSH-Key
ssh-keygen -t ed25519 -C "your_email@example.com"
cat ~/.ssh/id_ed25519.pub | xclip -sel c
# cole o conteúdo da área de transferência em uma nova chave do github

# apague o histórico
history -c
